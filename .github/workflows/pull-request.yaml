name: Pull Request
env:
  STAGE_PREFIX: "pr${{ github.event.pull_request.id }}"
on:
  pull_request:
    branches:
        - main
jobs:
  deploy-infra:
    defaults:
      run:
        working-directory: ./infra
    permissions:
      pull-requests: write
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: 'us-west-2'
          role-to-assume: "arn:aws:iam::975050125701:role/victor-hobby-github"
          role-skip-session-tagging: true
      - name: OpenTofu - Setup Tofu
        uses: opentofu/setup-opentofu@v1.0.3
        with:
            tofu_version: 1.7.2
      - name: Initialize Tofu
        id: init
        run: tofu init -backend=True # Disables the backend configuration
      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color
      - name: OpenTofu Plan
        id: plan
        run: tofu plan -no-color -var "stage_prefix=${{ env.STAGE_PREFIX }}"
      - name: OpenTofu Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: tofu apply -no-color -var "stage_prefix=${{ env.STAGE_PREFIX }}" -auto-approve
      - name: Run Integration Tests
        id: integration_tests
        run: echo "There are currently no integration tests to run."
      - name: Cleanup Infrastructure
        id: cleanup_infrastructure
        if: steps.apply.outcome == 'success'
        run: tofu destroy -auto-approve -var "stage_prefix=${{ env.STAGE_PREFIX }}"
      - name: Comment on PR
        uses: actions/github-script@v6
        if: (success() || failure()) && github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            #### OpenTofu Apply 🚀\`${{ steps.apply.outcome }}\`

            <details><summary>Apply Output</summary>

            \`\`\`\n
            ${{ steps.apply.outputs.stdout }}
            \`\`\`

            </details>

            #### Integration Tests 🧪\`${{ steps.integration_tests.outcome }}\`

            <details><summary>Integration Tests Output</summary>

            \`\`\`\n
            ${{ steps.integration_tests.outputs.stdout }}
            \`\`\`

            </details>

            #### Cleanup Infrastructure 🧹\`${{ steps.cleanup_infrastructure.outcome }}\`

            <details><summary>Cleanup Output</summary>

            \`\`\`\n
            ${{ steps.cleanup_infrastructure.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
  setup-node:
    defaults:
      run:
        working-directory: ./frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: 🏗 Setup Node
        uses: actions/setup-node@v4.0.2
        with:
          cache-dependency-path: ./frontend/package-lock.json
          node-version: 20.x
          cache: npm
  deploy-web:
    needs: setup-node
    permissions:
      contents: write
    defaults:
      run:
        working-directory: frontend
    runs-on: ubuntu-latest
    steps:
      - name: Working Directory
        run: echo "Working Directory is $(pwd)"
      - name: Deploy to GitHub Pages
        id: deployment
        run: |
          pwd
          npm run deploy
